name: ❯ Python Pain001

on:
  pull_request:
    branches:
      - main
      - 'feat/*'
  push:
    branches:
      - main

jobs:
  # This job reads the version number from setup.cfg and sets it as an environment variable
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: ❯ Set up Python 🐍
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: ❯ Get version number from setup.cfg
        id: set-version
        run: |
          echo "::set-output name=version::$(python -c 'import configparser; cfg = configparser.ConfigParser(); cfg.read("setup.cfg"); print(cfg.get("metadata", "version"))')"

  # This job builds the distribution packages, and publishes them to PyPI and GitHub releases
  build:
    needs: version
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      VERSION: ${{ needs.version.outputs.version }}
      PKG_NAME: pain001
    steps:
      # Check out the repository code
      - uses: actions/checkout@v2

      # Set up Python
      - name: ❯ Set up Python 🐍
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Install dependencies
      - name: ❯ Install dependencies 📦
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements.txt

      # Build distribution packages
      - name: ❯ Build distribution packages 🧰
        run: |
          python setup.py sdist bdist_wheel

      # Publish distribution packages to PyPI
      - name: ❯ Publish distribution packages to PyPI 🚀
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: pypa/gh-action-pypi-publish@v1.8.1
        with:
          user: ${{ env.TWINE_USERNAME }}
          password: ${{ env.TWINE_PASSWORD }}
          packages_dir: dist
          verify_metadata: true
          skip_existing: true

      # Create a new GitHub release and upload artifacts
      - name: ❯ Create GitHub Release 🚀
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body: |
            ## Artifacts 🎁
            ${{ env.RELEASE_NOTES }}
        id: create_release

      # Upload distribution packages as release assets
      - name: ❯ Upload Release Assets 📦
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.create_release.upload_url }}
          asset_path: dist/*
          asset_name: ${{ env.PKG_NAME }}-${{ env.VERSION }}-${{ matrix.os }}.tar.gz
          asset_content_type: application/gzip

      # Generate the changelog based on git log and template file
      - name: ❯ Generate Changelog
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a new release with the tag name v${{ env.VERSION }} and set the release notes
          RELEASE_NOTES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:'%s' | sed 's/^/- /')
          curl \
            --header "Accept: application/vnd.github.v3+json" \
            --header "Authorization: Bearer $GITHUB_TOKEN" \
            --request POST \
            --data "{\"tag_name\": \"v${{ env.VERSION }}\",\"name\": \"Release v${{ env.VERSION }}\",\"body\": \"$RELEASE_NOTES\"}" \
            "https://api.github.com/repos/${{ github.repository }}/releases"

          # Append the artifact links to the changelog
          echo "## Artifacts 🎁" >> ${{ github.workspace }}/CHANGELOG.md
          for filename in dist/*; do
            link="$(basename $filename)"
            echo "* [$link](${{ github.server_url }}/${{ github.repository }}/releases/download/v${{ env.VERSION }}/$link)" >> ${{ github.workspace }}/CHANGELOG.md
          done

